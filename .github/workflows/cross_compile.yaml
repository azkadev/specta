name: Compile Cross platform
on: [workflow_dispatch]

jobs:
  build:
    name: Compile Program dart cross platform @azkadev
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            output-name: linux
          - os: macOS-latest
            output-name: macos
          - os: windows-latest
            output-name: windows

    steps:
      - name: Export Release Timestamp
        run: echo "APP_VERSION=v$(date +'%Y.%m.%d.%H.%M.%S')" >> $GITHUB_ENV
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '15'
          distribution: 'adopt'
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.3.7'
          channel: 'stable'
      # - name: Set up Dart
      #   uses: cedx/setup-dart@v3
      #   with:
      #     architecture: x64
      #     release-channel: stable
      #     version: latest
      - name: check dart version
        run: dart --version
      - name: Install Dependencies
        run:  |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt update -y
            sudo apt-get install -y make git zlib1g-dev libssl-dev gperf cmake clang libc++-dev libc++abi-dev php-cli cmake g++
            sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          fi
        shell: bash
      - name: Mkdir build
        run: mkdir build
      - name: Compile Specta Apis
        run: |
          cd specta_apis
          dart pub get
          dart compile exe specta_apis/bin/specta_apis.dart -o ../build/specta_apis_${{ matrix.output-name }}_${{ runner.arch	 }}
      - name: Compile Specta Bot Telegram
        run: |
          cd specta_bot_telegram
          dart pub get
          dart compile exe specta_bot_telegram/bin/specta_bot_telegram.dart -o ../build/specta_bot_telegram_${{ matrix.output-name }}_${{ runner.arch	 }}
      - name: Compile Specta Compute
        run: |
          cd specta_compute
          dart pub get
          dart compile exe specta_compute/bin/specta_compute.dart -o ../build/specta_compute_${{ matrix.output-name }}_${{ runner.arch	 }}
      - name: Compile Specta UserBot Telegram
        run: |
          cd specta_userbot_telegram
          dart pub get
          dart compile exe specta_userbot_telegram/bin/specta_userbot_telegram.dart -o ../build/specta_userbot_telegram_${{ matrix.output-name }}_${{ runner.arch	 }}
      
      # - name: Install pub Dependencies
      #   run: dart pub get 
      # - name: Mkdir build
      #   run: mkdir build
      # - name: Compile dart to exe
      #  run: dart compile exe ./bin/${{ github.event.repository.name }}.dart -o build/${{ github.event.repository.name }}_${{ matrix.output-name }}_${{ runner.arch	 }}
      # - name: Publish artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: Artifact
      #     path: build/*
      - name: Publish Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ github.token }}"
          automatic_release_tag: "latest-${{ matrix.output-name }}"
          prerelease: false
          title: "Release ${{ matrix.output-name }}"
          files: |
            specta_compute/*